Python Job Portal

Project Creation

Students should follow these steps to develop their final project.

1 Project Requirements

User Roles:
a) Job Seekers (Register, Search Jobs, Apply)
b) Employers (Post Jobs, Manage Listings)
c) Admin (Manage Users & Jobs)

Features:
a) User registration & login
b) Job posting with title, description, salary, location
c) Job search with filters (location, category, company)
d) Users can apply for jobs
e) Database to store job listings and applications

Tech Stack:
Backend: Python (Flask or Django)
Frontend: HTML, CSS, Bootstrap
Database: SQLite or PostgreSQL
API Integration: Fetch job listings from an API (optional)

=============================================

Step 2: Submission

Guidelines
What to Submit?

1. Project Folder
a) Must contain all source code (.py,.html, .css, .js)
b) Database file (.sqlite3 or.sql dump)
3) requirements.txt for dependencies
d) README.md with setup instructions

2. Demo Video (Optional)
Record a short video (2-5 mins) explaining features & demonstrating the app.

3. Live Deployment (Bonus)
If deployed (e.g., on Render, Railway, or Heroku), submit the live link.

=============================================

Step 3: How to Submit?

a) Upload to GitHub/GitLab: Share a public repository link.
b) Submit ZIP File: If not using GitHub, upload a .zip file with all code files.
c) Submission Deadline: Set a fixed deadline (e.g.. 7 davs after proiect assionment).

Step 4: Evaluation

Criteria     Points

Functionality 40 pts

Code Quality  20 pts

UI/UX Design  20 pts

Deployment (Bonus) 10 pts

Documentation  10 pts

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Project Folder
|
|---> Home Page
|---> Login Page
|---> Register Page
|---> apply-job.html
|---> Dashboard-employer.html
|---> Dashboard-admin.html
|---> css
|       |---> style.css
|---> js
|       |---> script.js 
|---> Images

